/**
 * @file types.ts
 * @description This file contains TypeScript interfaces for the core data models
 * used throughout the application, ensuring type safety and consistency.
 * This program was written by Stuart Mason October 2025.
 */

// Represents a tabletop gaming system, e.g., "Warhammer 40,000".
export interface GameSystem {
  id: string; // Unique identifier, typically generated by the database.
  name: string; // The display name of the game system.
}

// Represents an army or faction within a specific game system.
export interface Army {
  id:string; // Unique identifier.
  name:string; // The display name of the army, e.g., "Space Marines".
  gameSystemId: string; // A foreign key that links this army to a GameSystem.
}

// Represents a single miniature model in the user's collection.
export interface Model {
  id: string; // Unique identifier for the model entry.
  name: string; // The name of the model, e.g., "Primaris Intercessor".
  armyIds: string[]; // An array of foreign keys, allowing a model to belong to multiple armies (e.g., a mercenary).
  gameSystemId: string; // A foreign key linking this model to a primary GameSystem.
  description: string; // A text description, which can include lore or gameplay notes.
  quantity: number; // How many of this specific model the user owns.
  status: 'Purchased' | 'Printed' | 'Assembled' | 'Primed' | 'Painted' | 'Based' | 'Ready to Game'; // The current stage in the painting/hobby process.
  imageUrl?: string; // Optional URL or base64 data string for an image of the model.
  paintingNotes?: string; // Optional field for storing paint recipes, colors used, or other hobby notes.
}

// Represents a temporary notification message (a "toast") shown to the user.
export type ToastMessage = {
  id: number; // A unique ID (often a timestamp) for managing the toast's lifecycle.
  message: string; // The text content of the notification.
  type: 'success' | 'error'; // The type of toast, used for styling (e.g., green for success, red for error).
};
